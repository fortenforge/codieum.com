<!DOCTYPE html><html lang="en" class="scroll-smooth"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Using Code Syntax Parsing for Generative AI | Codeium · Free AI Code Completion &amp; Chat</title><meta name="robots" content="follow, index"/><meta name="description" content="The theory, challenges, and future of code syntax parsing."/><meta property="og:url" content="https://codeium.com/blog/using-code-syntax-parsing-for-generative-ai"/><meta property="og:type" content="article"/><meta property="og:site_name" content="Codeium · Free AI Code Completion &amp; Chat"/><meta property="og:description" content="The theory, challenges, and future of code syntax parsing."/><meta property="og:title" content="Using Code Syntax Parsing for Generative AI | Codeium · Free AI Code Completion &amp; Chat"/><meta property="og:image" content="https://codeium.com/static/images/codeium-hero-blog-image.png"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:site" content="https://twitter.com/codeiumdev"/><meta name="twitter:title" content="Using Code Syntax Parsing for Generative AI | Codeium · Free AI Code Completion &amp; Chat"/><meta name="twitter:description" content="The theory, challenges, and future of code syntax parsing."/><meta name="twitter:image" content="https://codeium.com/static/images/codeium-hero-blog-image.png"/><meta property="article:published_time" content="2023-03-15T07:00:00.000Z"/><link rel="canonical" href="using-code-syntax-parsing-for-generative-ai"/><script type="application/ld+json">{
  "@context": "https://schema.org",
  "@type": "Article",
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "https://codeium.com/blog/using-code-syntax-parsing-for-generative-ai"
  },
  "headline": "Using Code Syntax Parsing for Generative AI | Codeium · Free AI Code Completion & Chat",
  "image": [
    {
      "@type": "ImageObject",
      "url": "https://codeium.com/static/images/codeium-hero-blog-image.png"
    }
  ],
  "datePublished": "2023-03-15T07:00:00.000Z",
  "dateModified": "2023-03-15T07:00:00.000Z",
  "publisher": {
    "@type": "Organization",
    "name": "Exafunction Team",
    "logo": {
      "@type": "ImageObject",
      "url": "https://codeium.com/static/images/codeium-square-logo-small.png"
    }
  },
  "description": "The theory, challenges, and future of code syntax parsing."
}</script><meta name="next-head-count" content="19"/><link rel="icon" href="../favicon.ico" sizes="any"/><link rel="icon" href="../favicon.svg" type="image/svg+xml"/><link rel="apple-touch-icon" href="../static/favicons/apple-touch-icon.png"/><link rel="manifest" href="../site.webmanifest"/><link rel="mask-icon" href="../favicon.svg" color="#09B6A2"/><meta name="msapplication-TileColor" content="#09B6A2"/><meta name="theme-color" content="#09B6A2"/><link rel="alternate" type="application/rss+xml" href="../feed.xml"/><link rel="preload" href="../_next/static/media/a867b47a386517bf-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="../_next/static/media/1549f4f270cb6be6-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="../_next/static/css/ab20e30d40808759.css" as="style" crossorigin=""/><link rel="stylesheet" href="../_next/static/css/ab20e30d40808759.css" crossorigin="" data-n-g=""/><noscript data-n-css=""></noscript><script defer="" crossorigin="" nomodule="" src="../_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="../_next/static/chunks/webpack-e4a677b500b5999c.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/framework-eecc82da3d7483c8.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/main-365e64b898d454fe.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/pages/_app-b18c057b02158ccd.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/1275-10c1869f0bbf00dd.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/7889-985592a7849b8efa.js" defer="" crossorigin=""></script><script src="../_next/static/chunks/pages/blog/[...slug]-069c086b04a1a686.js" defer="" crossorigin=""></script><script src="../_next/static/VBXOvo5BSUCiJzjePzBK3/_buildManifest.js" defer="" crossorigin=""></script><script src="../_next/static/VBXOvo5BSUCiJzjePzBK3/_ssgManifest.js" defer="" crossorigin=""></script><style id="__jsx-303972100">:root{--default-font:'__Assistant_6ce12c', '__Assistant_Fallback_6ce12c';--header-font:'__Lexend_b77898', '__Lexend_Fallback_b77898';--mono-font:Courier, monospace}</style></head><body class="bg-site-background text-white antialiased"><div id="__next"><script>!function(){try{var d=document.documentElement,c=d.classList;c.remove('light','dark');var e=localStorage.getItem('theme');if('system'===e||(!e&&false)){var t='(prefers-color-scheme: dark)',m=window.matchMedia(t);if(m.media!==t||m.matches){d.style.colorScheme = 'dark';c.add('dark')}else{d.style.colorScheme = 'light';c.add('light')}}else if(e){c.add(e|| '')}else{c.add('dark')}if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'dark'}catch(e){}}()</script><header class="mb-[35px] flex w-full items-center justify-between px-4 py-4 md:mb-[70px]"><div class="flex grow-0 flex-row items-center justify-center"><a aria-label="Codeium" class="transition-all duration-150" href="../index.html"><div class="flex items-center justify-between"><div class="mr-2 px-3"><svg viewBox="0 0 1989 450" fill="none" xmlns="http://www.w3.org/2000/svg" height="40"><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 32.0294L200 225L392.971 417.971C397.314 413.627 400 407.627 400 401V49C400 42.3726 397.314 36.3726 392.971 32.0294Z" fill="#60D5C4"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 32.0294L200 225L7.02942 32.0294C11.3726 27.6863 17.3726 25 24 25H376C382.627 25 388.627 27.6863 392.971 32.0294Z" fill="#71E9D8"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M7.02944 32.0294L200 225L7.02944 417.971C2.68629 413.627 0 407.627 0 401V49C0 42.3726 2.68629 36.3726 7.02944 32.0294Z" fill="#60D5C4"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 417.971L200 225L7.02942 417.971C11.3726 422.314 17.3726 425 24 425H376C382.627 425 388.627 422.314 392.971 417.971Z" fill="#71E9D8"></path><rect x="50" y="75" width="300" height="300" rx="2" fill="#09B6A2"></rect><path d="M120.8 315.12C101.24 315.12 91.46 305.34 91.46 285.78V243.84C91.46 236.52 87.86 232.86 80.66 232.86C78.02 232.86 75.8 232.02 74 230.34C72.32 228.66 71.48 226.5 71.48 223.86C71.48 221.1 72.32 218.88 74 217.2C75.8 215.52 78.02 214.68 80.66 214.68C87.86 214.68 91.46 211.02 91.46 203.7V161.76C91.46 142.2 101.24 132.42 120.8 132.42C123.44 132.42 125.6 133.32 127.28 135.12C128.96 136.92 129.8 139.14 129.8 141.78C129.8 144.42 128.96 146.58 127.28 148.26C125.6 149.94 123.44 150.78 120.8 150.78C113.48 150.78 109.82 154.44 109.82 161.76V203.7C109.82 207.9 109.34 211.68 108.38 215.04C107.42 218.4 105.98 221.34 104.06 223.86C107.9 228.78 109.82 235.44 109.82 243.84V285.78C109.82 293.1 113.48 296.76 120.8 296.76C123.44 296.76 125.6 297.6 127.28 299.28C128.96 300.96 129.8 303.18 129.8 305.94C129.8 308.58 128.96 310.74 127.28 312.42C125.6 314.22 123.44 315.12 120.8 315.12ZM156.733 275.88C153.373 275.88 150.433 274.68 147.913 272.28C145.513 269.76 144.313 266.82 144.313 263.46C144.313 259.98 145.513 257.04 147.913 254.64C150.433 252.12 153.373 250.86 156.733 250.86C160.213 250.86 163.153 252.12 165.553 254.64C167.953 257.04 169.153 259.98 169.153 263.46C169.153 266.82 167.953 269.76 165.553 272.28C163.153 274.68 160.213 275.88 156.733 275.88ZM199.623 275.88C196.263 275.88 193.323 274.68 190.803 272.28C188.403 269.76 187.203 266.82 187.203 263.46C187.203 259.98 188.403 257.04 190.803 254.64C193.323 252.12 196.263 250.86 199.623 250.86C203.103 250.86 206.043 252.12 208.443 254.64C210.843 257.04 212.043 259.98 212.043 263.46C212.043 266.82 210.843 269.76 208.443 272.28C206.043 274.68 203.103 275.88 199.623 275.88ZM242.514 275.88C239.154 275.88 236.214 274.68 233.694 272.28C231.294 269.76 230.094 266.82 230.094 263.46C230.094 259.98 231.294 257.04 233.694 254.64C236.214 252.12 239.154 250.86 242.514 250.86C245.994 250.86 248.934 252.12 251.334 254.64C253.734 257.04 254.934 259.98 254.934 263.46C254.934 266.82 253.734 269.76 251.334 272.28C248.934 274.68 245.994 275.88 242.514 275.88ZM278.564 315.12C275.924 315.12 273.764 314.22 272.084 312.42C270.404 310.74 269.564 308.58 269.564 305.94C269.564 303.18 270.404 300.96 272.084 299.28C273.764 297.6 275.924 296.76 278.564 296.76C285.884 296.76 289.544 293.1 289.544 285.78V243.84C289.544 235.44 291.464 228.78 295.304 223.86C293.384 221.34 291.944 218.4 290.984 215.04C290.024 211.68 289.544 207.9 289.544 203.7V161.76C289.544 154.44 285.884 150.78 278.564 150.78C275.924 150.78 273.764 149.94 272.084 148.26C270.404 146.58 269.564 144.42 269.564 141.78C269.564 139.14 270.404 136.92 272.084 135.12C273.764 133.32 275.924 132.42 278.564 132.42C298.124 132.42 307.904 142.2 307.904 161.76V203.7C307.904 211.02 311.504 214.68 318.704 214.68C321.344 214.68 323.504 215.52 325.184 217.2C326.984 218.88 327.884 221.1 327.884 223.86C327.884 226.5 326.984 228.66 325.184 230.34C323.504 232.02 321.344 232.86 318.704 232.86C311.504 232.86 307.904 236.52 307.904 243.84V285.78C307.904 305.34 298.124 315.12 278.564 315.12Z" fill="white"></path><path d="M592.2 363.6C574.68 363.6 558.96 359.28 545.04 350.64C531.36 342 520.44 330.24 512.28 315.36C504.36 300.48 500.4 283.8 500.4 265.32C500.4 246.84 504.36 230.16 512.28 215.28C520.44 200.4 531.36 188.64 545.04 180C558.96 171.36 574.68 167.04 592.2 167.04C609 167.04 624.24 170.52 637.92 177.48C651.84 184.2 662.4 193.44 669.6 205.2L649.08 230.4C645.24 224.88 640.32 219.84 634.32 215.28C628.32 210.72 621.96 207.12 615.24 204.48C608.52 201.84 602.04 200.52 595.8 200.52C584.28 200.52 573.96 203.4 564.84 209.16C555.96 214.68 548.88 222.36 543.6 232.2C538.32 242.04 535.68 253.08 535.68 265.32C535.68 277.56 538.44 288.6 543.96 298.44C549.48 308.04 556.8 315.72 565.92 321.48C575.04 327.24 585.12 330.12 596.16 330.12C602.64 330.12 608.88 329.04 614.88 326.88C621.12 324.72 627.12 321.48 632.88 317.16C638.64 312.84 644.04 307.56 649.08 301.32L669.6 326.52C661.92 337.32 650.88 346.2 636.48 353.16C622.32 360.12 607.56 363.6 592.2 363.6ZM789.536 363.6C771.056 363.6 754.496 359.4 739.856 351C725.456 342.36 714.056 330.72 705.656 316.08C697.256 301.2 693.056 284.28 693.056 265.32C693.056 246.36 697.256 229.56 705.656 214.92C714.056 200.04 725.456 188.4 739.856 180C754.496 171.36 771.056 167.04 789.536 167.04C807.776 167.04 824.096 171.36 838.496 180C853.136 188.4 864.656 200.04 873.056 214.92C881.456 229.56 885.656 246.36 885.656 265.32C885.656 284.28 881.456 301.2 873.056 316.08C864.656 330.72 853.136 342.36 838.496 351C824.096 359.4 807.776 363.6 789.536 363.6ZM789.536 329.76C800.816 329.76 810.896 327 819.776 321.48C828.656 315.72 835.616 308.04 840.656 298.44C845.696 288.6 848.096 277.56 847.856 265.32C848.096 252.84 845.696 241.8 840.656 232.2C835.616 222.36 828.656 214.68 819.776 209.16C810.896 203.64 800.816 200.88 789.536 200.88C778.256 200.88 768.056 203.76 758.936 209.52C750.056 215.04 743.096 222.72 738.056 232.56C733.016 242.16 730.616 253.08 730.856 265.32C730.616 277.56 733.016 288.6 738.056 298.44C743.096 308.04 750.056 315.72 758.936 321.48C768.056 327 778.256 329.76 789.536 329.76ZM1004.9 363.6C987.621 363.6 972.141 359.4 958.461 351C945.021 342.36 934.341 330.72 926.421 316.08C918.501 301.2 914.541 284.28 914.541 265.32C914.541 246.36 918.381 229.56 926.061 214.92C933.981 200.04 944.661 188.4 958.101 180C971.541 171.36 986.781 167.04 1003.82 167.04C1013.18 167.04 1022.18 168.6 1030.82 171.72C1039.7 174.6 1047.62 178.68 1054.58 183.96C1061.54 189 1066.94 194.64 1070.78 200.88C1074.86 206.88 1076.9 213 1076.9 219.24L1066.1 219.96V93.6H1103.18V360H1066.1V315H1073.3C1073.3 320.76 1071.38 326.52 1067.54 332.28C1063.7 337.8 1058.54 342.96 1052.06 347.76C1045.82 352.56 1038.5 356.4 1030.1 359.28C1021.94 362.16 1013.54 363.6 1004.9 363.6ZM1009.94 331.56C1021.22 331.56 1031.18 328.68 1039.82 322.92C1048.46 317.16 1055.18 309.36 1059.98 299.52C1065.02 289.44 1067.54 278.04 1067.54 265.32C1067.54 252.6 1065.02 241.32 1059.98 231.48C1055.18 221.4 1048.46 213.48 1039.82 207.72C1031.18 201.96 1021.22 199.08 1009.94 199.08C998.661 199.08 988.701 201.96 980.061 207.72C971.421 213.48 964.581 221.4 959.541 231.48C954.741 241.32 952.341 252.6 952.341 265.32C952.341 278.04 954.741 289.44 959.541 299.52C964.581 309.36 971.421 317.16 980.061 322.92C988.701 328.68 998.661 331.56 1009.94 331.56ZM1242.42 363.6C1222.98 363.6 1205.7 359.52 1190.58 351.36C1175.7 342.96 1163.94 331.56 1155.3 317.16C1146.9 302.76 1142.7 286.2 1142.7 267.48C1142.7 252.6 1145.1 239.04 1149.9 226.8C1154.7 214.56 1161.3 204 1169.7 195.12C1178.34 186 1188.54 179.04 1200.3 174.24C1212.3 169.2 1225.26 166.68 1239.18 166.68C1251.42 166.68 1262.82 169.08 1273.38 173.88C1283.94 178.44 1293.06 184.8 1300.74 192.96C1308.66 201.12 1314.66 210.84 1318.74 222.12C1323.06 233.16 1325.1 245.28 1324.86 258.48L1324.5 274.32H1170.06L1161.78 244.8H1292.46L1287.06 250.92V242.28C1286.34 234.36 1283.7 227.28 1279.14 221.04C1274.58 214.8 1268.82 209.88 1261.86 206.28C1254.9 202.68 1247.34 200.88 1239.18 200.88C1226.22 200.88 1215.3 203.4 1206.42 208.44C1197.54 213.24 1190.82 220.44 1186.26 230.04C1181.7 239.4 1179.42 251.04 1179.42 264.96C1179.42 278.16 1182.18 289.68 1187.7 299.52C1193.22 309.12 1201.02 316.56 1211.1 321.84C1221.18 327.12 1232.82 329.76 1246.02 329.76C1255.38 329.76 1264.02 328.2 1271.94 325.08C1280.1 321.96 1288.86 316.32 1298.22 308.16L1316.94 334.44C1311.18 340.2 1304.1 345.24 1295.7 349.56C1287.54 353.88 1278.78 357.36 1269.42 360C1260.3 362.4 1251.3 363.6 1242.42 363.6ZM1371.28 360V171H1408.36V360H1371.28ZM1389.28 129.24C1381.36 129.24 1375.24 127.2 1370.92 123.12C1366.6 119.04 1364.44 113.28 1364.44 105.84C1364.44 98.88 1366.6 93.24 1370.92 88.92C1375.48 84.6 1381.6 82.44 1389.28 82.44C1397.2 82.44 1403.32 84.48 1407.64 88.56C1411.96 92.64 1414.12 98.4 1414.12 105.84C1414.12 112.8 1411.84 118.44 1407.28 122.76C1402.96 127.08 1396.96 129.24 1389.28 129.24ZM1531.6 363.6C1518.16 363.6 1506.4 360.48 1496.32 354.24C1486.48 348 1478.8 339.24 1473.28 327.96C1468 316.68 1465.36 303.24 1465.36 287.64V171H1502.44V277.56C1502.44 288.6 1504.12 298.2 1507.48 306.36C1511.08 314.28 1516.12 320.4 1522.6 324.72C1529.32 329.04 1537.36 331.2 1546.72 331.2C1553.68 331.2 1560.04 330.12 1565.8 327.96C1571.56 325.56 1576.48 322.32 1580.56 318.24C1584.88 314.16 1588.24 309.24 1590.64 303.48C1593.04 297.72 1594.24 291.48 1594.24 284.76V171H1631.32V360H1594.24V320.4L1600.72 316.08C1597.84 324.96 1592.92 333 1585.96 340.2C1579.24 347.4 1571.2 353.16 1561.84 357.48C1552.48 361.56 1542.4 363.6 1531.6 363.6ZM1682.61 360V171H1720.05V211.32L1713.21 215.64C1715.13 209.4 1718.13 203.4 1722.21 197.64C1726.53 191.88 1731.69 186.84 1737.69 182.52C1743.93 177.96 1750.53 174.36 1757.49 171.72C1764.69 169.08 1772.01 167.76 1779.45 167.76C1790.25 167.76 1799.73 169.56 1807.89 173.16C1816.05 176.76 1822.77 182.16 1828.05 189.36C1833.33 196.56 1837.17 205.56 1839.57 216.36L1833.81 214.92L1836.33 208.8C1838.97 203.28 1842.57 198.12 1847.13 193.32C1851.93 188.28 1857.33 183.84 1863.33 180C1869.33 176.16 1875.69 173.16 1882.41 171C1889.13 168.84 1895.73 167.76 1902.21 167.76C1916.37 167.76 1928.01 170.64 1937.13 176.4C1946.49 182.16 1953.45 190.92 1958.01 202.68C1962.81 214.44 1965.21 229.08 1965.21 246.6V360H1927.77V248.76C1927.77 237.96 1926.33 229.2 1923.45 222.48C1920.81 215.52 1916.73 210.36 1911.21 207C1905.69 203.64 1898.61 201.96 1889.97 201.96C1883.25 201.96 1876.89 203.16 1870.89 205.56C1865.13 207.72 1860.09 210.84 1855.77 214.92C1851.45 219 1848.09 223.8 1845.69 229.32C1843.29 234.6 1842.09 240.48 1842.09 246.96V360H1804.65V248.04C1804.65 238.2 1803.21 229.92 1800.33 223.2C1797.45 216.24 1793.25 210.96 1787.73 207.36C1782.21 203.76 1775.49 201.96 1767.57 201.96C1760.85 201.96 1754.61 203.16 1748.85 205.56C1743.09 207.72 1738.05 210.84 1733.73 214.92C1729.41 218.76 1726.05 223.44 1723.65 228.96C1721.25 234.24 1720.05 240 1720.05 246.24V360H1682.61Z" fill="#09B6A2"></path></svg></div></div></a></div><div class="hidden grow flex-row flex-wrap justify-end md:flex"><div class="flex items-center justify-center"><a class="px-2 text-white hover:text-surface-200 md:px-3 lg:px-4" href="../pricing">Pricing</a></div><div class="flex items-center justify-center"><a class="hidden md:flex px-2 text-white hover:text-surface-200 md:px-3 lg:px-4" href="../chat">Chat</a></div><div class="flex items-center justify-center"><a class="hidden md:flex px-2 text-white hover:text-surface-200 md:px-3 lg:px-4" href="../enterprise">Enterprise</a></div><div class="flex items-center justify-center"><a class="hidden md:flex px-2 text-white hover:text-surface-200 md:px-3 lg:px-4" href="../playground">Playground</a></div><div class="flex items-center justify-center"><a class="hidden lg:flex px-2 text-white hover:text-surface-200 md:px-3 lg:px-4" href="../blog">Blog</a></div><div class="relative inline-block text-left px-2 md:px-3 lg:px-4" data-headlessui-state=""><div><button class="inline-flex items-center gap-x-1 leading-6 text-white hover:text-surface-300 transition-colors" id="headlessui-menu-button-:R3id56:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open options</span>Company<!-- --> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" class="h-4 w-4"><path fill-rule="evenodd" d="M12.53 16.28a.75.75 0 01-1.06 0l-7.5-7.5a.75.75 0 011.06-1.06L12 14.69l6.97-6.97a.75.75 0 111.06 1.06l-7.5 7.5z" clip-rule="evenodd"></path></svg></button></div></div></div><div class="flex grow flex-row items-center justify-end md:grow-0"><a target="_blank" rel="noopener noreferrer" href="https://discord.gg/3XFf78nAx5" class="w-12 text-center text-gray-50 transition-all duration-150"><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" width="28" height="28" class="m-auto fill-white"><title>Discord</title><path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"></path></svg></a><a target="_blank" rel="noopener noreferrer" class="w-12 cursor-pointer text-center text-gray-50 font-light hover:font-black transition-all duration-150" alt="Login"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="28" height="28" class="fill-white"><path d="M12 2a5 5 0 1 0 5 5 5 5 0 0 0-5-5zm0 8a3 3 0 1 1 3-3 3 3 0 0 1-3 3zm9 11v-1a7 7 0 0 0-7-7h-4a7 7 0 0 0-7 7v1h2v-1a5 5 0 0 1 5-5h4a5 5 0 0 1 5 5v1z"></path></svg></a><a class="transition-all duration-150" href="../download"><button style="border:none;background-size:300% 100%;transition:all 0.3s ease;background-image:linear-gradient(-60deg, #09b6a2, #6bf8e7, #09b6a2);background-position:100% 0" class="group flex h-14 items-center justify-center rounded-lg text-lg font-semibold text-white transition-all duration-100 glow-sm hover:glow-md ml-1 hidden h-9 w-28 text-sm sm:block">Get Codeium</button></a></div><div class="ml-3 md:ml-0 md:hidden"><button type="button" class="h-8 w-8 rounded py-1" aria-label="Toggle Menu"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="text-gray-50"><path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path></svg></button><div class="fixed right-0 top-20 z-20 h-full w-full transform overflow-y-auto bg-gray-50 opacity-95 duration-100 ease-in-out translate-x-full"><nav class="mb-20 mt-4 flex w-full flex-col"><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../index.html">Home</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../pricing">Pricing</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../chat">Chat</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../enterprise">Enterprise</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../blog">Blog</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../playground">Playground</a><div class="flex w-full cursor-pointer flex-row items-center justify-between px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500"><div>Company</div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="h-8 w-8 text-gray-900"><path d="M16.293 9.293 12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707z"></path></svg></div><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../download">Extensions</a><a class="w-full px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 hover:text-primary-500 transition-all duration-150" href="../profile">Login</a></nav></div></div></header><div class="mx-auto flex w-full max-w-5xl xl:max-w-6xl flex-col px-4 " aria-label="section-container-standard"><div class="flex flex-col justify-between" style="flex-grow:1"><main class="mb-auto"><div class="mx-auto flex max-w-7xl flex-col px-6 md:px-12"><div class="fixed bottom-8 right-8 hidden flex-col gap-3 md:hidden"><button aria-label="Scroll To Comment" type="button" class="rounded-full bg-gray-200 p-2 text-gray-500 transition-all hover:bg-gray-300"><svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path></svg></button><button aria-label="Scroll To Top" type="button" class="rounded-full bg-gray-200 p-2 text-gray-500 transition-all hover:bg-gray-300"><svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg></button></div><article><header><div class="space-y-1 border-b border-gray-200 pb-10 text-center"><dl><div><dt class="sr-only">Published on</dt><dd class="mb-8 mt-8 text-base font-medium leading-6 text-white"><time dateTime="2023-03-15T07:00:00.000Z">March 15, 2023</time></dd></div></dl><div><h1 class="md:leading-14 text-center text-3xl font-extrabold leading-9 tracking-tight text-white sm:text-4xl sm:leading-10 md:text-5xl">Using Code Syntax Parsing for Generative AI</h1></div><dl><div><dt class="sr-only">Written by</dt><dd class="mt-4 text-base font-medium leading-6 text-white">Prem Nair, Anshul Ramachandran</dd></div></dl></div></header><div class="mt-10 gap-8 sm:grid sm:grid-cols-9"><div class="hidden sm:col-span-2 sm:block"><div class="sticky top-8"><div class="rounded-md bg-neutral-700 p-4"><h4 class="mb-2 text-lg font-bold">Contents</h4><div class="mb-2 overflow-x-hidden" style="padding-left:8px"><a href="using-code-syntax-parsing-for-generative-ai#why-do-we-need-to-parse-syntax" class="text-brand-dark-300">Why do we need to parse syntax?</a></div><div class="mb-2 overflow-x-hidden" style="padding-left:8px"><a href="using-code-syntax-parsing-for-generative-ai#code-syntax-parsing-under-the-hood" class="text-brand-dark">Code syntax parsing under the hood</a></div><div class="mb-2 overflow-x-hidden" style="padding-left:8px"><a href="using-code-syntax-parsing-for-generative-ai#technical-challenges-in-code-syntax-parsing" class="text-brand-dark">Technical challenges in code syntax parsing</a></div><div class="mb-2 overflow-x-hidden" style="padding-left:8px"><a href="using-code-syntax-parsing-for-generative-ai#open-sourcing-a-syntax-parsing-command-line-tool" class="text-brand-dark">Open sourcing a syntax parsing command line tool</a></div><div class="mb-2 overflow-x-hidden" style="padding-left:8px"><a href="using-code-syntax-parsing-for-generative-ai#about-codeium" class="text-brand-dark">About Codeium</a></div></div></div></div><div class="sm:col-span-7"><div class="divide-y divide-white pb-8 xl:divide-y-0 " style="grid-template-rows:auto 1fr"><div class="divide-y divide-white xl:col-span-3 xl:row-span-2 xl:pb-0"><div class="prose max-w-none pb-8 text-white"><p class="text-base sm:text-lg">Parsing syntax is fundamental to modern programming. It’s an important step in running high-level programming languages such as Python, Javascript, and HTML as well as in protocols like HTTP and database languages like SQL. It’s also used in applications such as syntax highlighting or code indexing. <strong>If you want to write an application that works on source code, you’ll need to parse code syntax, but it’s tricky to do so across multiple languages in a consistent and useful way. In this post, we:</strong></p><ul><li class="text-base sm:text-lg"><strong>Discuss some of the details of syntax parsing</strong></li><li class="text-base sm:text-lg"><strong>Walk through one of the many small challenges we dealt with</strong></li><li class="text-base sm:text-lg"><strong>Introduce an open source tool, codeium-parse, to use in your own applications</strong></li></ul><h1 id="why-do-we-need-to-parse-syntax"><a href="using-code-syntax-parsing-for-generative-ai#why-do-we-need-to-parse-syntax" aria-hidden="true" tabindex="-1" class="transition-all duration-150"><span class="icon icon-link"></span></a>Why do we need to parse syntax?</h1><p class="text-base sm:text-lg">Our product at Codeium started with AI-powered code autocomplete, and we realized that having some understanding of syntax actually would help us produce better autocomplete blocks. We could recognize when people are starting blocks of code, truncate model results at the appropriate boundaries (e.g., end of current scope), and more. In general, we realized that for generative AI, we could use syntax understanding to improve both how we compose the model&#x27;s limited contextual input as well as our logic that cleans up model outputs.</p><p class="text-base sm:text-lg">Then, we built a novel capability – AI-powered repo-wide semantic search, i.e., ask a question in natural language such as “Where do we do X?” and get pointed to the exact code snippet that does that. Under the hood, it works by computing embeddings of code snippets and then performing a proprietary embedding search algorithm with the queries. For data security reasons, we wanted to compute and store the embeddings for the entire codebase locally (your entire codebase should not leave your machine), but that meant we would have to be picky about what we index like function signatures, global variables, etc. Syntax parsing all of a sudden became a requirement rather than a nice quality bump.</p><p class="text-base sm:text-lg">In the future, we plan on using code syntax understanding for a bunch more as a structured, deterministic complement to the AI that we are developing. Ideally, we would have an easily extendable framework to parse code syntax across languages in a consistent manner, rather than just throwing in custom logic for each of the many, many languages out there. And that ideal is what led us to the work in this post.</p><h1 id="code-syntax-parsing-under-the-hood"><a href="using-code-syntax-parsing-for-generative-ai#code-syntax-parsing-under-the-hood" aria-hidden="true" tabindex="-1" class="transition-all duration-150"><span class="icon icon-link"></span></a>Code syntax parsing under the hood</h1><p class="text-base sm:text-lg">Parsing and using code syntax for any application can be simplified into two steps:</p><ul><li class="text-base sm:text-lg">Computing a structured intermediate representation of the code</li><li class="text-base sm:text-lg">Applying queries on this intermediate representation to extract useful information</li></ul><p class="text-base sm:text-lg">One of the most common intermediate representations used for code is a concrete syntax tree (CST). By unrolling code into a tree where the nodes have metadata and the edges have semantic meaning, we can query for subtrees that match certain patterns to extract the information we want. For example, we might convert the following simple JavaScript code block:</p><div class="relative"><pre><code class="code-highlight language-js"><span class="code-line"><span class="token comment">// Adds two numbers.</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line">  <span class="token keyword control-flow">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</span><span class="code-line"><span class="token punctuation">}</span>
</span></code></pre></div><p class="text-base sm:text-lg">Into the following CST (note: this format is what is produced by the codeium-parse binary that we introduce later):</p><div class="relative"><pre><code class="code-highlight"><span class="code-line">program [0, 0] - [4, 0] &quot;// Adds two numbers.\n…&quot;
</span><span class="code-line">  comment [0, 0] - [0, 20] &quot;// Adds two numbers.&quot;
</span><span class="code-line">  function_declaration [1, 0] - [3, 1] &quot;function add(a, b) {\n…&quot;
</span><span class="code-line">    name: identifier [1, 9] - [1, 12] &quot;add&quot;
</span><span class="code-line">    parameters: formal_parameters [1, 12] - [1, 18] &quot;(a, b)&quot;
</span><span class="code-line">      identifier [1, 13] - [1, 14] &quot;a&quot;
</span><span class="code-line">      identifier [1, 16] - [1, 17] &quot;b&quot;
</span><span class="code-line">    body: statement_block [1, 19] - [3, 1] &quot;{\n…&quot;
</span><span class="code-line">      return_statement [2, 4] - [2, 17] &quot;return a + b;&quot;
</span><span class="code-line">        binary_expression [2, 11] - [2, 16] &quot;a + b&quot;
</span><span class="code-line">          left: identifier [2, 11] - [2, 12] &quot;a&quot;
</span><span class="code-line">          right: identifier [2, 15] - [2, 16] &quot;b&quot;
</span></code></pre></div><p class="text-base sm:text-lg">or visually:</p><div class="m-auto w-full max-w-2xl"><img class="h-full w-full rounded-md" src="../static/images/code_parse_syntax_tree.png" alt="drawing"/></div><p class="text-base sm:text-lg">Then, looking for something like arguments to each function just becomes querying for a subtree that looks like a <code>parameters</code> node with a number of <code>identifier</code> subnodes, and extracting the <code>identifier</code> nodes (as shown in the green nodes in the diagram).</p><p class="text-base sm:text-lg">One of the best and most popular libraries to produce CSTs is <a target="_blank" rel="noopener noreferrer" href="https://tree-sitter.github.io/tree-sitter/" class="transition-all duration-150">tree-sitter</a>, authored by <a target="_blank" rel="noopener noreferrer" href="https://github.com/maxbrunsfeld" class="transition-all duration-150">Max Brunsfeld</a>. It’s used by Github’s website to do things such as syntax highlighting and code symbol navigation. There are two main technical advantages of tree-sitter:</p><ul><li class="text-base sm:text-lg">It can incrementally parse and update the CST when there are edits</li><li class="text-base sm:text-lg">It’s error-tolerant, so it’s good for in-progress typing</li></ul><p class="text-base sm:text-lg">In addition to these, tree-sitter does not need to execute any compiler or other tools, and importantly for our applications, applies consistently to all languages if you have a grammar for the language.</p><p class="text-base sm:text-lg">With tree-sitter, we have a pretty good framework for the first half of parsing and using code syntax. tree-sitter actually makes each of its language bindings implement their own grammars and predicates (essentially filters and post-processing steps). This is probably to avoid having to build it with dependencies like a regex library, so we knew that this was something we had to build, but the framework was in place.</p><p class="text-base sm:text-lg">Now, on to the second half of using code syntax — the queries. tree-sitter has its own scheme-like query language and execution engine built in. However, it turns out that the queries in the tree-sitter repos are often stale, and queries in places like nvim-treesitter are mostly used for syntax highlighting and navigation. We wanted much more powerful queries to be used in real code analysis for core applications (as opposed to prettifiers and nice-to-have-but-not-required tricks). So, we realized there wasn’t an existing library of queries with similar power to what tree-sitter has done for parsing. This is where we would have to build the most.</p><h1 id="technical-challenges-in-code-syntax-parsing"><a href="using-code-syntax-parsing-for-generative-ai#technical-challenges-in-code-syntax-parsing" aria-hidden="true" tabindex="-1" class="transition-all duration-150"><span class="icon icon-link"></span></a>Technical challenges in code syntax parsing</h1><p class="text-base sm:text-lg">The most interesting technical challenge was actually writing the queries. Originally we hand-wrote code that navigated the CST. But this was brittle, so we switched to tree-sitter query language, which lets you write patterns to capture subtrees of the CST. But to see why it&#x27;s tricky, let’s try writing a query that would capture any function docstring (or identify if the function doesn’t have a docstring). Consider the following code snippets:</p><div class="relative"><pre><code class="code-highlight language-js"><span class="code-line"><span class="token comment">// Comment</span>
</span><span class="code-line"><span class="token comment">// Second line</span>
</span><span class="code-line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span></code></pre></div><p class="text-base sm:text-lg">and</p><div class="relative"><pre><code class="code-highlight language-js"><span class="code-line"><span class="token comment">// Comment</span>
</span><span class="code-line"><span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</span></code></pre></div><p class="text-base sm:text-lg">The only difference is an <code>export</code> keyword! How hard will writing a query be that could capture both?</p><p class="text-base sm:text-lg">Let’s write out the CSTs (flattened, so the brackets represent hierarchy):</p><ul><li class="text-base sm:text-lg">Code snippet one: <code>[doc] [doc] [function def]</code></li><li class="text-base sm:text-lg">Code snippet two: <code>[doc] [export [function def]]</code></li></ul><p class="text-base sm:text-lg">Well, given the first code snippet CST, clearly we would need something that looks for some number of <code>[doc]</code> nodes followed by a <code>[function def]</code> node, and then return the <code>[doc]</code> nodes, so maybe something like:</p><div class="relative"><pre><code class="code-highlight"><span class="code-line">[doc]* [function def]
</span></code></pre></div><p class="text-base sm:text-lg">(Note: this is not actual tree-sitter query syntax, but we are using this shorthand for legibility - consider the asterisk like a regex asterisk, which translates to “any number of <code>[doc]</code> type nodes”)</p><p class="text-base sm:text-lg">This will definitely work for the first snippet, but not for the second. The query would match, but not where we want it to! We would match the <code>[function def]</code> subtree and say there are no <code>[doc]</code> nodes (zero repeats for the asterisk): <code>[doc] [export {[doc]^0 [function def]} ]</code> (match is between the braces).</p><p class="text-base sm:text-lg">Okay, to match the proper doc string in the second example, we could add another option to our query:</p><div class="relative"><pre><code class="code-highlight"><span class="code-line">[doc]* [function def]
</span><span class="code-line">OR
</span><span class="code-line">[doc]* [export [function def]]
</span></code></pre></div><p class="text-base sm:text-lg">Well now, we actually match the second code snippet <em>twice</em>, once incorrectly like before, and once correctly. So now we need to find a way for the first option to not match the second code snippet while still matching the first.</p><p class="text-base sm:text-lg">The solution to this is a <code>[#not-has-parent? export]</code> predicate on the <code>[function def]</code> node. This means that we will match on the <code>[function def]</code> node only if it is not a child of an <code>export</code> node (which is true in the first code snippet, but not the second). So the final query looks like:</p><div class="relative"><pre><code class="code-highlight"><span class="code-line">[doc]* [function def][#not-has-parent? export]
</span><span class="code-line">OR
</span><span class="code-line">[doc]* [export [function def]]
</span></code></pre></div><p class="text-base sm:text-lg">The first condition will match only functions similar to the first code snippet (without the <code>export</code> keyword) and the second condition will match only functions similar to the second code snippet (with the <code>export</code> keyword). In practice we have to do something <a target="_blank" rel="noopener noreferrer" href="https://github.com/Exafunction/codeium-parse#query-predicates" class="transition-all duration-150">even more complicated</a>.</p><p class="text-base sm:text-lg">Beyond writing powerful queries, there was an assortment of other technical issues we faced while building a library that provided language-specific tree-sitter grammars and useful queries:</p><ul><li class="text-base sm:text-lg">We wanted all of the parsers to integrate into one cross platform binary so that anyone could use them anywhere. We used a lot of <a target="_blank" rel="noopener noreferrer" href="https://pkg.go.dev/cmd/cgo" class="transition-all duration-150">cgo</a> and wrote our own tree-sitter bindings in Go. Other bindings do exist like <a target="_blank" rel="noopener noreferrer" href="https://github.com/smacker/go-tree-sitter" class="transition-all duration-150">this one</a>, but they don’t implement enough predicates and don’t play well with our bazel monorepo.</li><li class="text-base sm:text-lg">tree-sitter is great, but to provide end-to-end parsing and querying, we hit a bunch of OOMs and timeouts at the parsing stage since we’ve stress-tested tree-sitter on a vast amount of code during our work indexing entire codebases. We’ve started to use fuzz testing to detect and improve parser issues, and will upstream any fixes we’re able to find.</li><li class="text-base sm:text-lg">We wanted to make sure that the tool could play nicely as a portable unix-like tool with other tools. This meant writing JSON outputs and creating a single statically linked binary, among other things.</li></ul><h1 id="open-sourcing-a-syntax-parsing-command-line-tool"><a href="using-code-syntax-parsing-for-generative-ai#open-sourcing-a-syntax-parsing-command-line-tool" aria-hidden="true" tabindex="-1" class="transition-all duration-150"><span class="icon icon-link"></span></a>Open sourcing a syntax parsing command line tool</h1><p class="text-base sm:text-lg">After working on this code syntax parsing and querying project for a while, we realized (a) we had done a nontrivial amount of work that we should share with the broader community to use and (b) it would be best for us to also get the contributions from the broader community moving forwards. So we open sourced it at <a target="_blank" rel="noopener noreferrer" href="https://github.com/Exafunction/codeium-parse" class="transition-all duration-150">codeium-parse</a>, an end-to-end command line tool for parsing and querying code syntax!</p><p class="text-base sm:text-lg">We have created some high quality queries for the community and hope to crowdsource it for rarer languages. Anyone can contribute in a few different ways:</p><ul><li class="text-base sm:text-lg">Find/think of useful applications of code syntax parsing that can use codeium-parse</li><li class="text-base sm:text-lg">Tell us what grammars you want to see supported</li><li class="text-base sm:text-lg">Contribute queries in new languages to help us share useful information extracted about code</li><li class="text-base sm:text-lg">Add unimplemented attributes we’re not yet detecting, such as imports, enums, and constants</li></ul><p class="text-base sm:text-lg">We would love to work with you to keep pushing code syntax parsing forwards!</p><h1 id="about-codeium"><a href="using-code-syntax-parsing-for-generative-ai#about-codeium" aria-hidden="true" tabindex="-1" class="transition-all duration-150"><span class="icon icon-link"></span></a>About Codeium</h1><p class="text-base sm:text-lg">Here at Codeium, we are building the most powerful AI-powered code acceleration toolkit. We started with autocomplete, similar to tools like GitHub Copilot, getting it to a point where we are confident in saying we are <a target="_blank" rel="noopener noreferrer" href="code-assistant-comparison-copilot-tabnine-ghostwriter-codeium" class="transition-all duration-150">as good, if not better, than all competitors</a>. While we are continuing to improve autocomplete, we are also building novel AI applications to the software development workflow, such as natural language based, repo-wide code search.</p><p class="text-base sm:text-lg">We are making Codeium <em>free forever</em> for all individual developers, and will monetize by working with enterprises (there are some AI superpowers that are only viable at organizational, rather than individual, levels). We already have thousands of developers using Codeium daily to accelerate their development cycles, and we’d love for you to give it a spin as well. Codeium is available on <a target="_blank" rel="noopener noreferrer" href="../download" class="transition-all duration-150">all major IDEs</a>, including as a Chrome extension for notebooks and websites, and works on over 40 of the most popular programming languages.</p></div></div><div id="comment"></div></div></div></div><footer class="py-4"><h1 class="gradient-primary gradient-text text-center leading-loose">Suggested Posts</h1><div class="grid grid-cols-1 gap-4 md:grid-cols-2 md:gap-8 lg:grid-cols-3 lg:gap-10"><article class="my-12 flex flex-col items-start justify-start gap-4"><div class="relative grow-0"><a class="cursor-pointer transition-all duration-150" href="changelist-feb23"><img src="../static/images/codeium-hero-blog-image.png" alt="" class="aspect-[4/3] w-full rounded-2xl bg-gray-100 object-cover lg:max-w-[320px]"/></a></div><div class="group relative col-span-1 max-w-xl grow"><div class="flex flex-row items-center gap-2"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center justify-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z"></path></svg>Mar 2, 2023</span><a class="transition-all duration-150" href="tags/product"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex min-h-[30px] max-w-[160px] items-center overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs capitalize text-white transition-all duration-150 hover:text-surface-300 sm:!px-2 xl:text-sm">product</span></a><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>3<!-- --> min</span></div><a class="cursor-pointer hover:text-gray-200 cursor-pointer transition-all duration-150" href="changelist-feb23"><h5 class="mt-2">Changelist: February 2023</h5></a><p class="my-3 leading-6 text-gray-100">Codeium updates from February 2023!</p><a aria-label="Read &quot;Changelist: February 2023&quot;" class="cursor-pointer font-medium hover:border-brand-light text-brand-dark hover:text-brand-light transition-all duration-150" href="changelist-feb23">Read more →</a></div></article><article class="my-12 flex flex-col items-start justify-start gap-4"><div class="relative grow-0"><a class="cursor-pointer transition-all duration-150" href="codeium-for-enterprises"><img src="../static/images/enterprise_site_card.png" alt="" class="aspect-[4/3] w-full rounded-2xl bg-gray-100 object-cover lg:max-w-[320px]"/></a></div><div class="group relative col-span-1 max-w-xl grow"><div class="flex flex-row items-center gap-2"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center justify-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z"></path></svg>Mar 17, 2023</span><a class="transition-all duration-150" href="tags/product"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex min-h-[30px] max-w-[160px] items-center overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs capitalize text-white transition-all duration-150 hover:text-surface-300 sm:!px-2 xl:text-sm">product</span></a><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>7<!-- --> min</span></div><a class="cursor-pointer hover:text-gray-200 cursor-pointer transition-all duration-150" href="codeium-for-enterprises"><h5 class="mt-2">Codeium for Enterprises</h5></a><p class="my-3 leading-6 text-gray-100">Codeium for Enterprises is the only AI acceleration offering to provide code security, fine-tuning, and state-of-the-art quality.</p><a aria-label="Read &quot;Codeium for Enterprises&quot;" class="cursor-pointer font-medium hover:border-brand-light text-brand-dark hover:text-brand-light transition-all duration-150" href="codeium-for-enterprises">Read more →</a></div></article><article class="my-12 flex flex-col items-start justify-start gap-4"><div class="relative grow-0"><a class="cursor-pointer transition-all duration-150" href="code-llm-eval-why-you-should-not-trust-all-the-numbers-you-see"><img src="https://exafunction.github.io/public/hero/hero_eval_metrics.png" alt="" class="aspect-[4/3] w-full rounded-2xl bg-gray-100 object-cover lg:max-w-[320px]"/></a></div><div class="group relative col-span-1 max-w-xl grow"><div class="flex flex-row items-center gap-2"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center justify-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5m-9-6h.008v.008H12v-.008zM12 15h.008v.008H12V15zm0 2.25h.008v.008H12v-.008zM9.75 15h.008v.008H9.75V15zm0 2.25h.008v.008H9.75v-.008zM7.5 15h.008v.008H7.5V15zm0 2.25h.008v.008H7.5v-.008zm6.75-4.5h.008v.008h-.008v-.008zm0 2.25h.008v.008h-.008V15zm0 2.25h.008v.008h-.008v-.008zm2.25-4.5h.008v.008H16.5v-.008zm0 2.25h.008v.008H16.5V15z"></path></svg>Oct 3, 2023</span><a class="transition-all duration-150" href="tags/product"><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex min-h-[30px] max-w-[160px] items-center overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs capitalize text-white transition-all duration-150 hover:text-surface-300 sm:!px-2 xl:text-sm">product</span></a><span class="rounded-xl px-4 py-1 text-sm bg-gray-100 text-black flex max-h-[30px] max-w-[160px] items-center gap-2 overflow-hidden whitespace-nowrap !bg-surface-800 px-1 text-xs text-white sm:!px-2 xl:text-sm"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-5 w-5"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>13<!-- --> min</span></div><a class="cursor-pointer hover:text-gray-200 cursor-pointer transition-all duration-150" href="code-llm-eval-why-you-should-not-trust-all-the-numbers-you-see"><h5 class="mt-2">Why You Should Not Trust All the Numbers You See</h5></a><p class="my-3 leading-6 text-gray-100">Our take on industry benchmarks and how to actually evaluate AI code LLMs and tools.</p><a aria-label="Read &quot;Why You Should Not Trust All the Numbers You See&quot;" class="cursor-pointer font-medium hover:border-brand-light text-brand-dark hover:text-brand-light transition-all duration-150" href="code-llm-eval-why-you-should-not-trust-all-the-numbers-you-see">Read more →</a></div></article></div></footer></article></div></main></div><footer aria-labelledby="footer-heading"><h2 id="footer-heading" class="sr-only">Footer</h2><div class="mx-auto max-w-7xl px-6 pb-8 pt-16 sm:pt-24 lg:px-8 lg:pt-32"><div class="xl:grid xl:grid-cols-3 xl:gap-8"><div class="space-y-4"><svg viewBox="0 0 1989 450" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-7"><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 32.0294L200 225L392.971 417.971C397.314 413.627 400 407.627 400 401V49C400 42.3726 397.314 36.3726 392.971 32.0294Z" fill="#60D5C4"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 32.0294L200 225L7.02942 32.0294C11.3726 27.6863 17.3726 25 24 25H376C382.627 25 388.627 27.6863 392.971 32.0294Z" fill="#71E9D8"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M7.02944 32.0294L200 225L7.02944 417.971C2.68629 413.627 0 407.627 0 401V49C0 42.3726 2.68629 36.3726 7.02944 32.0294Z" fill="#60D5C4"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M392.971 417.971L200 225L7.02942 417.971C11.3726 422.314 17.3726 425 24 425H376C382.627 425 388.627 422.314 392.971 417.971Z" fill="#71E9D8"></path><rect x="50" y="75" width="300" height="300" rx="2" fill="#09B6A2"></rect><path d="M120.8 315.12C101.24 315.12 91.46 305.34 91.46 285.78V243.84C91.46 236.52 87.86 232.86 80.66 232.86C78.02 232.86 75.8 232.02 74 230.34C72.32 228.66 71.48 226.5 71.48 223.86C71.48 221.1 72.32 218.88 74 217.2C75.8 215.52 78.02 214.68 80.66 214.68C87.86 214.68 91.46 211.02 91.46 203.7V161.76C91.46 142.2 101.24 132.42 120.8 132.42C123.44 132.42 125.6 133.32 127.28 135.12C128.96 136.92 129.8 139.14 129.8 141.78C129.8 144.42 128.96 146.58 127.28 148.26C125.6 149.94 123.44 150.78 120.8 150.78C113.48 150.78 109.82 154.44 109.82 161.76V203.7C109.82 207.9 109.34 211.68 108.38 215.04C107.42 218.4 105.98 221.34 104.06 223.86C107.9 228.78 109.82 235.44 109.82 243.84V285.78C109.82 293.1 113.48 296.76 120.8 296.76C123.44 296.76 125.6 297.6 127.28 299.28C128.96 300.96 129.8 303.18 129.8 305.94C129.8 308.58 128.96 310.74 127.28 312.42C125.6 314.22 123.44 315.12 120.8 315.12ZM156.733 275.88C153.373 275.88 150.433 274.68 147.913 272.28C145.513 269.76 144.313 266.82 144.313 263.46C144.313 259.98 145.513 257.04 147.913 254.64C150.433 252.12 153.373 250.86 156.733 250.86C160.213 250.86 163.153 252.12 165.553 254.64C167.953 257.04 169.153 259.98 169.153 263.46C169.153 266.82 167.953 269.76 165.553 272.28C163.153 274.68 160.213 275.88 156.733 275.88ZM199.623 275.88C196.263 275.88 193.323 274.68 190.803 272.28C188.403 269.76 187.203 266.82 187.203 263.46C187.203 259.98 188.403 257.04 190.803 254.64C193.323 252.12 196.263 250.86 199.623 250.86C203.103 250.86 206.043 252.12 208.443 254.64C210.843 257.04 212.043 259.98 212.043 263.46C212.043 266.82 210.843 269.76 208.443 272.28C206.043 274.68 203.103 275.88 199.623 275.88ZM242.514 275.88C239.154 275.88 236.214 274.68 233.694 272.28C231.294 269.76 230.094 266.82 230.094 263.46C230.094 259.98 231.294 257.04 233.694 254.64C236.214 252.12 239.154 250.86 242.514 250.86C245.994 250.86 248.934 252.12 251.334 254.64C253.734 257.04 254.934 259.98 254.934 263.46C254.934 266.82 253.734 269.76 251.334 272.28C248.934 274.68 245.994 275.88 242.514 275.88ZM278.564 315.12C275.924 315.12 273.764 314.22 272.084 312.42C270.404 310.74 269.564 308.58 269.564 305.94C269.564 303.18 270.404 300.96 272.084 299.28C273.764 297.6 275.924 296.76 278.564 296.76C285.884 296.76 289.544 293.1 289.544 285.78V243.84C289.544 235.44 291.464 228.78 295.304 223.86C293.384 221.34 291.944 218.4 290.984 215.04C290.024 211.68 289.544 207.9 289.544 203.7V161.76C289.544 154.44 285.884 150.78 278.564 150.78C275.924 150.78 273.764 149.94 272.084 148.26C270.404 146.58 269.564 144.42 269.564 141.78C269.564 139.14 270.404 136.92 272.084 135.12C273.764 133.32 275.924 132.42 278.564 132.42C298.124 132.42 307.904 142.2 307.904 161.76V203.7C307.904 211.02 311.504 214.68 318.704 214.68C321.344 214.68 323.504 215.52 325.184 217.2C326.984 218.88 327.884 221.1 327.884 223.86C327.884 226.5 326.984 228.66 325.184 230.34C323.504 232.02 321.344 232.86 318.704 232.86C311.504 232.86 307.904 236.52 307.904 243.84V285.78C307.904 305.34 298.124 315.12 278.564 315.12Z" fill="white"></path><path d="M592.2 363.6C574.68 363.6 558.96 359.28 545.04 350.64C531.36 342 520.44 330.24 512.28 315.36C504.36 300.48 500.4 283.8 500.4 265.32C500.4 246.84 504.36 230.16 512.28 215.28C520.44 200.4 531.36 188.64 545.04 180C558.96 171.36 574.68 167.04 592.2 167.04C609 167.04 624.24 170.52 637.92 177.48C651.84 184.2 662.4 193.44 669.6 205.2L649.08 230.4C645.24 224.88 640.32 219.84 634.32 215.28C628.32 210.72 621.96 207.12 615.24 204.48C608.52 201.84 602.04 200.52 595.8 200.52C584.28 200.52 573.96 203.4 564.84 209.16C555.96 214.68 548.88 222.36 543.6 232.2C538.32 242.04 535.68 253.08 535.68 265.32C535.68 277.56 538.44 288.6 543.96 298.44C549.48 308.04 556.8 315.72 565.92 321.48C575.04 327.24 585.12 330.12 596.16 330.12C602.64 330.12 608.88 329.04 614.88 326.88C621.12 324.72 627.12 321.48 632.88 317.16C638.64 312.84 644.04 307.56 649.08 301.32L669.6 326.52C661.92 337.32 650.88 346.2 636.48 353.16C622.32 360.12 607.56 363.6 592.2 363.6ZM789.536 363.6C771.056 363.6 754.496 359.4 739.856 351C725.456 342.36 714.056 330.72 705.656 316.08C697.256 301.2 693.056 284.28 693.056 265.32C693.056 246.36 697.256 229.56 705.656 214.92C714.056 200.04 725.456 188.4 739.856 180C754.496 171.36 771.056 167.04 789.536 167.04C807.776 167.04 824.096 171.36 838.496 180C853.136 188.4 864.656 200.04 873.056 214.92C881.456 229.56 885.656 246.36 885.656 265.32C885.656 284.28 881.456 301.2 873.056 316.08C864.656 330.72 853.136 342.36 838.496 351C824.096 359.4 807.776 363.6 789.536 363.6ZM789.536 329.76C800.816 329.76 810.896 327 819.776 321.48C828.656 315.72 835.616 308.04 840.656 298.44C845.696 288.6 848.096 277.56 847.856 265.32C848.096 252.84 845.696 241.8 840.656 232.2C835.616 222.36 828.656 214.68 819.776 209.16C810.896 203.64 800.816 200.88 789.536 200.88C778.256 200.88 768.056 203.76 758.936 209.52C750.056 215.04 743.096 222.72 738.056 232.56C733.016 242.16 730.616 253.08 730.856 265.32C730.616 277.56 733.016 288.6 738.056 298.44C743.096 308.04 750.056 315.72 758.936 321.48C768.056 327 778.256 329.76 789.536 329.76ZM1004.9 363.6C987.621 363.6 972.141 359.4 958.461 351C945.021 342.36 934.341 330.72 926.421 316.08C918.501 301.2 914.541 284.28 914.541 265.32C914.541 246.36 918.381 229.56 926.061 214.92C933.981 200.04 944.661 188.4 958.101 180C971.541 171.36 986.781 167.04 1003.82 167.04C1013.18 167.04 1022.18 168.6 1030.82 171.72C1039.7 174.6 1047.62 178.68 1054.58 183.96C1061.54 189 1066.94 194.64 1070.78 200.88C1074.86 206.88 1076.9 213 1076.9 219.24L1066.1 219.96V93.6H1103.18V360H1066.1V315H1073.3C1073.3 320.76 1071.38 326.52 1067.54 332.28C1063.7 337.8 1058.54 342.96 1052.06 347.76C1045.82 352.56 1038.5 356.4 1030.1 359.28C1021.94 362.16 1013.54 363.6 1004.9 363.6ZM1009.94 331.56C1021.22 331.56 1031.18 328.68 1039.82 322.92C1048.46 317.16 1055.18 309.36 1059.98 299.52C1065.02 289.44 1067.54 278.04 1067.54 265.32C1067.54 252.6 1065.02 241.32 1059.98 231.48C1055.18 221.4 1048.46 213.48 1039.82 207.72C1031.18 201.96 1021.22 199.08 1009.94 199.08C998.661 199.08 988.701 201.96 980.061 207.72C971.421 213.48 964.581 221.4 959.541 231.48C954.741 241.32 952.341 252.6 952.341 265.32C952.341 278.04 954.741 289.44 959.541 299.52C964.581 309.36 971.421 317.16 980.061 322.92C988.701 328.68 998.661 331.56 1009.94 331.56ZM1242.42 363.6C1222.98 363.6 1205.7 359.52 1190.58 351.36C1175.7 342.96 1163.94 331.56 1155.3 317.16C1146.9 302.76 1142.7 286.2 1142.7 267.48C1142.7 252.6 1145.1 239.04 1149.9 226.8C1154.7 214.56 1161.3 204 1169.7 195.12C1178.34 186 1188.54 179.04 1200.3 174.24C1212.3 169.2 1225.26 166.68 1239.18 166.68C1251.42 166.68 1262.82 169.08 1273.38 173.88C1283.94 178.44 1293.06 184.8 1300.74 192.96C1308.66 201.12 1314.66 210.84 1318.74 222.12C1323.06 233.16 1325.1 245.28 1324.86 258.48L1324.5 274.32H1170.06L1161.78 244.8H1292.46L1287.06 250.92V242.28C1286.34 234.36 1283.7 227.28 1279.14 221.04C1274.58 214.8 1268.82 209.88 1261.86 206.28C1254.9 202.68 1247.34 200.88 1239.18 200.88C1226.22 200.88 1215.3 203.4 1206.42 208.44C1197.54 213.24 1190.82 220.44 1186.26 230.04C1181.7 239.4 1179.42 251.04 1179.42 264.96C1179.42 278.16 1182.18 289.68 1187.7 299.52C1193.22 309.12 1201.02 316.56 1211.1 321.84C1221.18 327.12 1232.82 329.76 1246.02 329.76C1255.38 329.76 1264.02 328.2 1271.94 325.08C1280.1 321.96 1288.86 316.32 1298.22 308.16L1316.94 334.44C1311.18 340.2 1304.1 345.24 1295.7 349.56C1287.54 353.88 1278.78 357.36 1269.42 360C1260.3 362.4 1251.3 363.6 1242.42 363.6ZM1371.28 360V171H1408.36V360H1371.28ZM1389.28 129.24C1381.36 129.24 1375.24 127.2 1370.92 123.12C1366.6 119.04 1364.44 113.28 1364.44 105.84C1364.44 98.88 1366.6 93.24 1370.92 88.92C1375.48 84.6 1381.6 82.44 1389.28 82.44C1397.2 82.44 1403.32 84.48 1407.64 88.56C1411.96 92.64 1414.12 98.4 1414.12 105.84C1414.12 112.8 1411.84 118.44 1407.28 122.76C1402.96 127.08 1396.96 129.24 1389.28 129.24ZM1531.6 363.6C1518.16 363.6 1506.4 360.48 1496.32 354.24C1486.48 348 1478.8 339.24 1473.28 327.96C1468 316.68 1465.36 303.24 1465.36 287.64V171H1502.44V277.56C1502.44 288.6 1504.12 298.2 1507.48 306.36C1511.08 314.28 1516.12 320.4 1522.6 324.72C1529.32 329.04 1537.36 331.2 1546.72 331.2C1553.68 331.2 1560.04 330.12 1565.8 327.96C1571.56 325.56 1576.48 322.32 1580.56 318.24C1584.88 314.16 1588.24 309.24 1590.64 303.48C1593.04 297.72 1594.24 291.48 1594.24 284.76V171H1631.32V360H1594.24V320.4L1600.72 316.08C1597.84 324.96 1592.92 333 1585.96 340.2C1579.24 347.4 1571.2 353.16 1561.84 357.48C1552.48 361.56 1542.4 363.6 1531.6 363.6ZM1682.61 360V171H1720.05V211.32L1713.21 215.64C1715.13 209.4 1718.13 203.4 1722.21 197.64C1726.53 191.88 1731.69 186.84 1737.69 182.52C1743.93 177.96 1750.53 174.36 1757.49 171.72C1764.69 169.08 1772.01 167.76 1779.45 167.76C1790.25 167.76 1799.73 169.56 1807.89 173.16C1816.05 176.76 1822.77 182.16 1828.05 189.36C1833.33 196.56 1837.17 205.56 1839.57 216.36L1833.81 214.92L1836.33 208.8C1838.97 203.28 1842.57 198.12 1847.13 193.32C1851.93 188.28 1857.33 183.84 1863.33 180C1869.33 176.16 1875.69 173.16 1882.41 171C1889.13 168.84 1895.73 167.76 1902.21 167.76C1916.37 167.76 1928.01 170.64 1937.13 176.4C1946.49 182.16 1953.45 190.92 1958.01 202.68C1962.81 214.44 1965.21 229.08 1965.21 246.6V360H1927.77V248.76C1927.77 237.96 1926.33 229.2 1923.45 222.48C1920.81 215.52 1916.73 210.36 1911.21 207C1905.69 203.64 1898.61 201.96 1889.97 201.96C1883.25 201.96 1876.89 203.16 1870.89 205.56C1865.13 207.72 1860.09 210.84 1855.77 214.92C1851.45 219 1848.09 223.8 1845.69 229.32C1843.29 234.6 1842.09 240.48 1842.09 246.96V360H1804.65V248.04C1804.65 238.2 1803.21 229.92 1800.33 223.2C1797.45 216.24 1793.25 210.96 1787.73 207.36C1782.21 203.76 1775.49 201.96 1767.57 201.96C1760.85 201.96 1754.61 203.16 1748.85 205.56C1743.09 207.72 1738.05 210.84 1733.73 214.92C1729.41 218.76 1726.05 223.44 1723.65 228.96C1721.25 234.24 1720.05 240 1720.05 246.24V360H1682.61Z" fill="#09B6A2"></path></svg><p class="text-sm leading-6 text-gray-200">Your modern coding superpowers.</p><div class="flex"><div class="mr-5"><span class="sr-only">Mail</span><a class="text-sm text-white hover:text-brand-dark" target="_blank" rel="noopener noreferrer" href="mailto:hello@codeium.com"><span class="sr-only">mail</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="h-6 w-6 fill-white text-white hover:fill-brand-dark hover:text-brand-dark"><path d="M2.003 5.884 10 9.882l7.997-3.998A2 2 0 0 0 16 4H4a2 2 0 0 0-1.997 1.884z"></path><path d="m18 8.118-8 4-8-4V14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8.118z"></path></svg></a></div><div class="mr-5"><span class="sr-only">Twitter</span><a class="text-sm text-white hover:text-brand-dark" target="_blank" rel="noopener noreferrer" href="https://twitter.com/codeiumdev"><span class="sr-only">twitter</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6 fill-white text-white hover:fill-brand-dark hover:text-brand-dark"><path d="M23.953 4.57a10 10 0 0 1-2.825.775 4.958 4.958 0 0 0 2.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 0 0-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 0 0-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 0 1-2.228-.616v.06a4.923 4.923 0 0 0 3.946 4.827 4.996 4.996 0 0 1-2.212.085 4.936 4.936 0 0 0 4.604 3.417 9.867 9.867 0 0 1-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 0 0 7.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0 0 24 4.59z"></path></svg></a></div><div class="mr-5"><span class="sr-only">Discord</span><a class="text-sm text-white hover:text-brand-dark" target="_blank" rel="noopener noreferrer" href="https://discord.gg/3XFf78nAx5"><span class="sr-only">discord</span><svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 fill-white text-white hover:fill-brand-dark hover:text-brand-dark"><title>Discord</title><path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"></path></svg></a></div><div class="mr-5"><span class="sr-only">LinkedIn</span><a class="text-sm text-white hover:text-brand-dark" target="_blank" rel="noopener noreferrer" href="https://www.linkedin.com/company/codeiumdev/	"><span class="sr-only">linkedin</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6 fill-white text-white hover:fill-brand-dark hover:text-brand-dark"><path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 0 1-2.063-2.065 2.064 2.064 0 1 1 2.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path></svg></a></div><div class="mr-5"><span class="sr-only">YouTube</span><a class="text-sm text-white hover:text-brand-dark" target="_blank" rel="noopener noreferrer" href="https://www.youtube.com/@codeiumdev"><span class="sr-only">youtube</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6 fill-white text-white hover:fill-brand-dark hover:text-brand-dark"><path d="M23.499 6.203a3.008 3.008 0 0 0-2.089-2.089c-1.87-.501-9.4-.501-9.4-.501s-7.509-.01-9.399.501a3.008 3.008 0 0 0-2.088 2.09A31.258 31.26 0 0 0 0 12.01a31.258 31.26 0 0 0 .523 5.785 3.008 3.008 0 0 0 2.088 2.089c1.869.502 9.4.502 9.4.502s7.508 0 9.399-.502a3.008 3.008 0 0 0 2.089-2.09 31.258 31.26 0 0 0 .5-5.784 31.258 31.26 0 0 0-.5-5.808zm-13.891 9.4V8.407l6.266 3.604z"></path></svg></a></div></div></div><div class="mt-16 grid grid-cols-2 gap-8 xl:col-span-2 xl:mt-0"><div class="md:grid md:grid-cols-2 md:gap-8"><div><h3 class="text-sm font-semibold leading-6 text-white">Product</h3><ul role="list" class="mt-3 space-y-2"><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../chat">Codeium Chat</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../pricing">Pricing</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../enterprise">Enterprise</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../faq">Supported Languages</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../compare">Compare</a></li></ul></div><div class="mt-10 md:mt-0"><h3 class="text-sm font-semibold leading-6 text-white">Extensions</h3><ul role="list" class="mt-3 space-y-2"><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../vscode_tutorial">Visual Studio Code</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../jetbrains_tutorial">JetBrains</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../vim_tutorial">Neovim / Vim</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../jupyter_tutorial">Jupyter</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../download">See All</a></li></ul></div></div><div class="md:grid md:grid-cols-2 md:gap-8"><div><h3 class="text-sm font-semibold leading-6 text-white">Company</h3><ul role="list" class="mt-3 space-y-2"><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../about">About Us</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../blog">Blog</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../contact">Contact</a></li><li><a target="_blank" rel="noopener noreferrer" href="https://discord.gg/3XFf78nAx5" class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150">Community</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../faq">FAQs</a></li></ul></div><div class="mt-10 md:mt-0"><h3 class="text-sm font-semibold leading-6 text-white">Learn</h3><ul role="list" class="mt-3 space-y-2"><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../glossary">AI Glossary</a></li></ul><h3 class="mt-10 text-sm font-semibold leading-6 text-white">Resources</h3><ul role="list" class="mt-3 space-y-2"><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../terms-of-service-individual">Terms of Service</a></li><li><a class="text-sm leading-6 text-gray-200 hover:text-white transition-all duration-150" href="../privacy-policy">Privacy Policy</a></li></ul></div></div></div></div><div class="mt-16 border-t border-gray-900/10 pt-8 sm:mt-20 lg:mt-24"><p class="text-xs leading-5 text-gray-500">© 2023 Exafunction, Inc. All rights reserved.</p></div></div></footer></div><div id="installModal" class="fixed top-0 hidden h-full w-full bg-gray-900 bg-opacity-80"><div class="flex items-center justify-center px-4 py-48 2xl:container md:px-28 2xl:mx-auto"><div class="relative flex w-96 flex-col items-center justify-center rounded bg-white px-4 py-16 md:w-auto md:px-24 xl:px-36 xl:py-24"><div class="mt-12"><h1 role="main" class="text-center text-3xl font-semibold leading-7 text-primary-800 lg:text-4xl lg:leading-9">Enjoying the Playground?</h1></div><div class="mt"><p class="mt-6 text-center text-base leading-7 text-gray-800 sm:w-80">Install the Codeium Extension to use Codeium for free today!</p></div><a target="_blank" rel="noopener noreferrer" class="mt-6 transition-all duration-150"><button style="border:none;background-size:300% 100%;transition:all 0.3s ease;background-image:linear-gradient(-60deg, #09b6a2, #6bf8e7, #09b6a2);background-position:100% 0" class="group flex h-14 items-center justify-center rounded-lg text-lg font-semibold text-white transition-all duration-100 glow-sm hover:glow-md w-48">Get Codeium<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="ml-1 h-6 w-6 transition-all duration-150 group-hover:translate-x-2"><path d="M10.061 19.061 17.121 12l-7.06-7.061-2.122 2.122L12.879 12l-4.94 4.939z"></path></svg></button></a><a class="mt-6 cursor-pointer border-b border-gray-800 text-center text-base leading-none text-gray-800 hover:border-primary-500 hover:text-primary-500 focus:border-gray-800 focus:outline-none">Not now, let me explore the website more</a></div></div></div></div><script id="__NEXT_DATA__" type="application/json" crossorigin="">{"props":{"pageProps":{"post":{"frontMatter":{"title":"Using Code Syntax Parsing for Generative AI","date":"2023-03-15T07:00:00.000Z","tags":["technical"],"summary":"The theory, challenges, and future of code syntax parsing.","images":["/static/images/codeium-hero-blog-image.png"],"authors":["prem","anshul"],"layout":"PostSimple","dateStr":"March 15, 2023","slug":"using-code-syntax-parsing-for-generative-ai","readingTime":{"text":"10 min read","minutes":9.69,"time":581400,"words":1938},"fileName":"using-code-syntax-parsing-for-generative-ai.mdx","draft":false,"relatedPosts":[],"featured":false},"toc":[{"value":"Why do we need to parse syntax?","url":"#why-do-we-need-to-parse-syntax","depth":1},{"value":"Code syntax parsing under the hood","url":"#code-syntax-parsing-under-the-hood","depth":1},{"value":"Technical challenges in code syntax parsing","url":"#technical-challenges-in-code-syntax-parsing","depth":1},{"value":"Open sourcing a syntax parsing command line tool","url":"#open-sourcing-a-syntax-parsing-command-line-tool","depth":1},{"value":"About Codeium","url":"#about-codeium","depth":1}],"mdxSource":"var Component=(()=\u003e{var l=Object.create;var o=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var s=t=\u003eo(t,\"__esModule\",{value:!0});var g=(t,a)=\u003e()=\u003e(a||t((a={exports:{}}).exports,a),a.exports),f=(t,a)=\u003e{s(t);for(var i in a)o(t,i,{get:a[i],enumerable:!0})},w=(t,a,i)=\u003e{if(a\u0026\u0026typeof a==\"object\"||typeof a==\"function\")for(let n of u(a))!m.call(t,n)\u0026\u0026n!==\"default\"\u0026\u0026o(t,n,{get:()=\u003ea[n],enumerable:!(i=h(a,n))||i.enumerable});return t},y=t=\u003ew(s(o(t!=null?l(p(t)):{},\"default\",t\u0026\u0026t.__esModule\u0026\u0026\"default\"in t?{get:()=\u003et.default,enumerable:!0}:{value:t,enumerable:!0})),t);var d=g((I,c)=\u003e{c.exports=_jsx_runtime});var v={};f(v,{default:()=\u003ex,frontmatter:()=\u003eb});var e=y(d()),b={title:\"Using Code Syntax Parsing for Generative AI\",date:new Date(16788636e5),tags:[\"technical\"],summary:\"The theory, challenges, and future of code syntax parsing.\",images:[\"/static/images/codeium-hero-blog-image.png\"],authors:[\"prem\",\"anshul\"],layout:\"PostSimple\"};function k(t={}){let{wrapper:a}=t.components||{};return a?(0,e.jsx)(a,Object.assign({},t,{children:(0,e.jsx)(i,{})})):i();function i(){let n=Object.assign({p:\"p\",strong:\"strong\",ul:\"ul\",li:\"li\",h1:\"h1\",a:\"a\",span:\"span\",pre:\"pre\",code:\"code\",em:\"em\"},t.components),{CenteredImage:r}=n;return r||N(\"CenteredImage\",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"Parsing syntax is fundamental to modern programming. It\\u2019s an important step in running high-level programming languages such as Python, Javascript, and HTML as well as in protocols like HTTP and database languages like SQL. It\\u2019s also used in applications such as syntax highlighting or code indexing. \",(0,e.jsx)(n.strong,{children:\"If you want to write an application that works on source code, you\\u2019ll need to parse code syntax, but it\\u2019s tricky to do so across multiple languages in a consistent and useful way. In this post, we:\"})]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:(0,e.jsx)(n.strong,{children:\"Discuss some of the details of syntax parsing\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.strong,{children:\"Walk through one of the many small challenges we dealt with\"})}),(0,e.jsx)(n.li,{children:(0,e.jsx)(n.strong,{children:\"Introduce an open source tool, codeium-parse, to use in your own applications\"})})]}),(0,e.jsxs)(n.h1,{id:\"why-do-we-need-to-parse-syntax\",children:[(0,e.jsx)(n.a,{href:\"#why-do-we-need-to-parse-syntax\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Why do we need to parse syntax?\"]}),(0,e.jsx)(n.p,{children:\"Our product at Codeium started with AI-powered code autocomplete, and we realized that having some understanding of syntax actually would help us produce better autocomplete blocks. We could recognize when people are starting blocks of code, truncate model results at the appropriate boundaries (e.g., end of current scope), and more. In general, we realized that for generative AI, we could use syntax understanding to improve both how we compose the model's limited contextual input as well as our logic that cleans up model outputs.\"}),(0,e.jsx)(n.p,{children:\"Then, we built a novel capability \\u2013 AI-powered repo-wide semantic search, i.e., ask a question in natural language such as \\u201CWhere do we do X?\\u201D and get pointed to the exact code snippet that does that. Under the hood, it works by computing embeddings of code snippets and then performing a proprietary embedding search algorithm with the queries. For data security reasons, we wanted to compute and store the embeddings for the entire codebase locally (your entire codebase should not leave your machine), but that meant we would have to be picky about what we index like function signatures, global variables, etc. Syntax parsing all of a sudden became a requirement rather than a nice quality bump.\"}),(0,e.jsx)(n.p,{children:\"In the future, we plan on using code syntax understanding for a bunch more as a structured, deterministic complement to the AI that we are developing. Ideally, we would have an easily extendable framework to parse code syntax across languages in a consistent manner, rather than just throwing in custom logic for each of the many, many languages out there. And that ideal is what led us to the work in this post.\"}),(0,e.jsxs)(n.h1,{id:\"code-syntax-parsing-under-the-hood\",children:[(0,e.jsx)(n.a,{href:\"#code-syntax-parsing-under-the-hood\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Code syntax parsing under the hood\"]}),(0,e.jsx)(n.p,{children:\"Parsing and using code syntax for any application can be simplified into two steps:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:\"Computing a structured intermediate representation of the code\"}),(0,e.jsx)(n.li,{children:\"Applying queries on this intermediate representation to extract useful information\"})]}),(0,e.jsx)(n.p,{children:\"One of the most common intermediate representations used for code is a concrete syntax tree (CST). By unrolling code into a tree where the nodes have metadata and the edges have semantic meaning, we can query for subtrees that match certain patterns to extract the information we want. For example, we might convert the following simple JavaScript code block:\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-js\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Adds two numbers.\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"add\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsxs)(n.span,{className:\"token parameter\",children:[\"a\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" b\"]}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword control-flow\",children:\"return\"}),\" a \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+\"}),\" b\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"Into the following CST (note: this format is what is produced by the codeium-parse binary that we introduce later):\"}),(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`program [0, 0] - [4, 0] \"// Adds two numbers.\\\\n\\u2026\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  comment [0, 0] - [0, 20] \"// Adds two numbers.\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`  function_declaration [1, 0] - [3, 1] \"function add(a, b) {\\\\n\\u2026\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`    name: identifier [1, 9] - [1, 12] \"add\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`    parameters: formal_parameters [1, 12] - [1, 18] \"(a, b)\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`      identifier [1, 13] - [1, 14] \"a\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`      identifier [1, 16] - [1, 17] \"b\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`    body: statement_block [1, 19] - [3, 1] \"{\\\\n\\u2026\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`      return_statement [2, 4] - [2, 17] \"return a + b;\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`        binary_expression [2, 11] - [2, 16] \"a + b\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`          left: identifier [2, 11] - [2, 12] \"a\"\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`          right: identifier [2, 15] - [2, 16] \"b\"\n`})]})}),(0,e.jsx)(n.p,{children:\"or visually:\"}),(0,e.jsx)(r,{className:\"m-0\",src:\"/static/images/code_parse_syntax_tree.png\",alt:\"drawing\",rounded:!0}),(0,e.jsxs)(n.p,{children:[\"Then, looking for something like arguments to each function just becomes querying for a subtree that looks like a \",(0,e.jsx)(n.code,{children:\"parameters\"}),\" node with a number of \",(0,e.jsx)(n.code,{children:\"identifier\"}),\" subnodes, and extracting the \",(0,e.jsx)(n.code,{children:\"identifier\"}),\" nodes (as shown in the green nodes in the diagram).\"]}),(0,e.jsxs)(n.p,{children:[\"One of the best and most popular libraries to produce CSTs is \",(0,e.jsx)(n.a,{href:\"https://tree-sitter.github.io/tree-sitter/\",children:\"tree-sitter\"}),\", authored by \",(0,e.jsx)(n.a,{href:\"https://github.com/maxbrunsfeld\",children:\"Max Brunsfeld\"}),\". It\\u2019s used by Github\\u2019s website to do things such as syntax highlighting and code symbol navigation. There are two main technical advantages of tree-sitter:\"]}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:\"It can incrementally parse and update the CST when there are edits\"}),(0,e.jsx)(n.li,{children:\"It\\u2019s error-tolerant, so it\\u2019s good for in-progress typing\"})]}),(0,e.jsx)(n.p,{children:\"In addition to these, tree-sitter does not need to execute any compiler or other tools, and importantly for our applications, applies consistently to all languages if you have a grammar for the language.\"}),(0,e.jsx)(n.p,{children:\"With tree-sitter, we have a pretty good framework for the first half of parsing and using code syntax. tree-sitter actually makes each of its language bindings implement their own grammars and predicates (essentially filters and post-processing steps). This is probably to avoid having to build it with dependencies like a regex library, so we knew that this was something we had to build, but the framework was in place.\"}),(0,e.jsx)(n.p,{children:\"Now, on to the second half of using code syntax \\u2014 the queries. tree-sitter has its own scheme-like query language and execution engine built in. However, it turns out that the queries in the tree-sitter repos are often stale, and queries in places like nvim-treesitter are mostly used for syntax highlighting and navigation. We wanted much more powerful queries to be used in real code analysis for core applications (as opposed to prettifiers and nice-to-have-but-not-required tricks). So, we realized there wasn\\u2019t an existing library of queries with similar power to what tree-sitter has done for parsing. This is where we would have to build the most.\"}),(0,e.jsxs)(n.h1,{id:\"technical-challenges-in-code-syntax-parsing\",children:[(0,e.jsx)(n.a,{href:\"#technical-challenges-in-code-syntax-parsing\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Technical challenges in code syntax parsing\"]}),(0,e.jsx)(n.p,{children:\"The most interesting technical challenge was actually writing the queries. Originally we hand-wrote code that navigated the CST. But this was brittle, so we switched to tree-sitter query language, which lets you write patterns to capture subtrees of the CST. But to see why it's tricky, let\\u2019s try writing a query that would capture any function docstring (or identify if the function doesn\\u2019t have a docstring). Consider the following code snippets:\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-js\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Comment\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Second line\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"foo\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsx)(n.p,{children:\"and\"}),(0,e.jsx)(n.pre,{className:\"language-js\",children:(0,e.jsxs)(n.code,{className:\"code-highlight language-js\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// Comment\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword module\",children:\"export\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"foo\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"The only difference is an \",(0,e.jsx)(n.code,{children:\"export\"}),\" keyword! How hard will writing a query be that could capture both?\"]}),(0,e.jsx)(n.p,{children:\"Let\\u2019s write out the CSTs (flattened, so the brackets represent hierarchy):\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[\"Code snippet one: \",(0,e.jsx)(n.code,{children:\"[doc] [doc] [function def]\"})]}),(0,e.jsxs)(n.li,{children:[\"Code snippet two: \",(0,e.jsx)(n.code,{children:\"[doc] [export [function def]]\"})]})]}),(0,e.jsxs)(n.p,{children:[\"Well, given the first code snippet CST, clearly we would need something that looks for some number of \",(0,e.jsx)(n.code,{children:\"[doc]\"}),\" nodes followed by a \",(0,e.jsx)(n.code,{children:\"[function def]\"}),\" node, and then return the \",(0,e.jsx)(n.code,{children:\"[doc]\"}),\" nodes, so maybe something like:\"]}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"code-highlight\",children:(0,e.jsx)(n.span,{className:\"code-line\",children:`[doc]* [function def]\n`})})}),(0,e.jsxs)(n.p,{children:[\"(Note: this is not actual tree-sitter query syntax, but we are using this shorthand for legibility - consider the asterisk like a regex asterisk, which translates to \\u201Cany number of \",(0,e.jsx)(n.code,{children:\"[doc]\"}),\" type nodes\\u201D)\"]}),(0,e.jsxs)(n.p,{children:[\"This will definitely work for the first snippet, but not for the second. The query would match, but not where we want it to! We would match the \",(0,e.jsx)(n.code,{children:\"[function def]\"}),\" subtree and say there are no \",(0,e.jsx)(n.code,{children:\"[doc]\"}),\" nodes (zero repeats for the asterisk): \",(0,e.jsx)(n.code,{children:\"[doc] [export {[doc]^0 [function def]} ]\"}),\" (match is between the braces).\"]}),(0,e.jsx)(n.p,{children:\"Okay, to match the proper doc string in the second example, we could add another option to our query:\"}),(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`[doc]* [function def]\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`OR\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`[doc]* [export [function def]]\n`})]})}),(0,e.jsxs)(n.p,{children:[\"Well now, we actually match the second code snippet \",(0,e.jsx)(n.em,{children:\"twice\"}),\", once incorrectly like before, and once correctly. So now we need to find a way for the first option to not match the second code snippet while still matching the first.\"]}),(0,e.jsxs)(n.p,{children:[\"The solution to this is a \",(0,e.jsx)(n.code,{children:\"[#not-has-parent? export]\"}),\" predicate on the \",(0,e.jsx)(n.code,{children:\"[function def]\"}),\" node. This means that we will match on the \",(0,e.jsx)(n.code,{children:\"[function def]\"}),\" node only if it is not a child of an \",(0,e.jsx)(n.code,{children:\"export\"}),\" node (which is true in the first code snippet, but not the second). So the final query looks like:\"]}),(0,e.jsx)(n.pre,{children:(0,e.jsxs)(n.code,{className:\"code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:`[doc]* [function def][#not-has-parent? export]\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`OR\n`}),(0,e.jsx)(n.span,{className:\"code-line\",children:`[doc]* [export [function def]]\n`})]})}),(0,e.jsxs)(n.p,{children:[\"The first condition will match only functions similar to the first code snippet (without the \",(0,e.jsx)(n.code,{children:\"export\"}),\" keyword) and the second condition will match only functions similar to the second code snippet (with the \",(0,e.jsx)(n.code,{children:\"export\"}),\" keyword). In practice we have to do something \",(0,e.jsx)(n.a,{href:\"https://github.com/Exafunction/codeium-parse#query-predicates\",children:\"even more complicated\"}),\".\"]}),(0,e.jsx)(n.p,{children:\"Beyond writing powerful queries, there was an assortment of other technical issues we faced while building a library that provided language-specific tree-sitter grammars and useful queries:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsxs)(n.li,{children:[\"We wanted all of the parsers to integrate into one cross platform binary so that anyone could use them anywhere. We used a lot of \",(0,e.jsx)(n.a,{href:\"https://pkg.go.dev/cmd/cgo\",children:\"cgo\"}),\" and wrote our own tree-sitter bindings in Go. Other bindings do exist like \",(0,e.jsx)(n.a,{href:\"https://github.com/smacker/go-tree-sitter\",children:\"this one\"}),\", but they don\\u2019t implement enough predicates and don\\u2019t play well with our bazel monorepo.\"]}),(0,e.jsx)(n.li,{children:\"tree-sitter is great, but to provide end-to-end parsing and querying, we hit a bunch of OOMs and timeouts at the parsing stage since we\\u2019ve stress-tested tree-sitter on a vast amount of code during our work indexing entire codebases. We\\u2019ve started to use fuzz testing to detect and improve parser issues, and will upstream any fixes we\\u2019re able to find.\"}),(0,e.jsx)(n.li,{children:\"We wanted to make sure that the tool could play nicely as a portable unix-like tool with other tools. This meant writing JSON outputs and creating a single statically linked binary, among other things.\"})]}),(0,e.jsxs)(n.h1,{id:\"open-sourcing-a-syntax-parsing-command-line-tool\",children:[(0,e.jsx)(n.a,{href:\"#open-sourcing-a-syntax-parsing-command-line-tool\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Open sourcing a syntax parsing command line tool\"]}),(0,e.jsxs)(n.p,{children:[\"After working on this code syntax parsing and querying project for a while, we realized (a) we had done a nontrivial amount of work that we should share with the broader community to use and (b) it would be best for us to also get the contributions from the broader community moving forwards. So we open sourced it at \",(0,e.jsx)(n.a,{href:\"https://github.com/Exafunction/codeium-parse\",children:\"codeium-parse\"}),\", an end-to-end command line tool for parsing and querying code syntax!\"]}),(0,e.jsx)(n.p,{children:\"We have created some high quality queries for the community and hope to crowdsource it for rarer languages. Anyone can contribute in a few different ways:\"}),(0,e.jsxs)(n.ul,{children:[(0,e.jsx)(n.li,{children:\"Find/think of useful applications of code syntax parsing that can use codeium-parse\"}),(0,e.jsx)(n.li,{children:\"Tell us what grammars you want to see supported\"}),(0,e.jsx)(n.li,{children:\"Contribute queries in new languages to help us share useful information extracted about code\"}),(0,e.jsx)(n.li,{children:\"Add unimplemented attributes we\\u2019re not yet detecting, such as imports, enums, and constants\"})]}),(0,e.jsx)(n.p,{children:\"We would love to work with you to keep pushing code syntax parsing forwards!\"}),(0,e.jsxs)(n.h1,{id:\"about-codeium\",children:[(0,e.jsx)(n.a,{href:\"#about-codeium\",\"aria-hidden\":\"true\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"About Codeium\"]}),(0,e.jsxs)(n.p,{children:[\"Here at Codeium, we are building the most powerful AI-powered code acceleration toolkit. We started with autocomplete, similar to tools like GitHub Copilot, getting it to a point where we are confident in saying we are \",(0,e.jsx)(n.a,{href:\"https://codeium.com/blog/code-assistant-comparison-copilot-tabnine-ghostwriter-codeium\",children:\"as good, if not better, than all competitors\"}),\". While we are continuing to improve autocomplete, we are also building novel AI applications to the software development workflow, such as natural language based, repo-wide code search.\"]}),(0,e.jsxs)(n.p,{children:[\"We are making Codeium \",(0,e.jsx)(n.em,{children:\"free forever\"}),\" for all individual developers, and will monetize by working with enterprises (there are some AI superpowers that are only viable at organizational, rather than individual, levels). We already have thousands of developers using Codeium daily to accelerate their development cycles, and we\\u2019d love for you to give it a spin as well. Codeium is available on \",(0,e.jsx)(n.a,{href:\"https://codeium.com/download\",children:\"all major IDEs\"}),\", including as a Chrome extension for notebooks and websites, and works on over 40 of the most popular programming languages.\"]})]})}}var x=k;function N(t,a){throw new Error(\"Expected \"+(a?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v;})();\n;return Component;"},"authorDetails":[{"name":"Prem Nair","occupation":"Software Engineer","company":"Exafunction","linkedin":"https://www.linkedin.com/in/premqnair/"},{"name":"Anshul Ramachandran","occupation":"Software Engineer","company":"Exafunction","linkedin":"https://www.linkedin.com/in/anshul-ramachandran/"}],"prev":{"title":"Changelist: February 2023","date":"2023-03-02T07:00:00.000Z","tags":["product","changelist"],"summary":"Codeium updates from February 2023!","images":["/static/images/codeium-hero-blog-image.png"],"authors":["default"],"layout":"PostSimple","dateStr":"March 2, 2023","slug":"changelist-feb23","readingTime":{"text":"3 min read","minutes":2.795,"time":167700,"words":559},"fileName":"changelist-feb23.mdx","draft":false,"relatedPosts":[],"featured":false},"next":{"title":"Codeium for Enterprises","date":"2023-03-17T07:00:00.000Z","tags":["product","enterprise"],"summary":"Codeium for Enterprises is the only AI acceleration offering to provide code security, fine-tuning, and state-of-the-art quality.","images":["/static/images/enterprise_site_card.png"],"authors":["default"],"layout":"PostSimple","dateStr":"March 17, 2023","slug":"codeium-for-enterprises","readingTime":{"text":"7 min read","minutes":6.82,"time":409200,"words":1364},"fileName":"codeium-for-enterprises.mdx","draft":false,"relatedPosts":[],"featured":false},"featuredPosts":[{"title":"Why You Should Not Trust All the Numbers You See","date":"2023-10-03T07:00:00.000Z","tags":["product","enterprise"],"filters":["enterprise_page"],"summary":"Our take on industry benchmarks and how to actually evaluate AI code LLMs and tools.","images":["https://exafunction.github.io/public/hero/hero_eval_metrics.png"],"authors":["matt","mehul","douglas"],"layout":"PostSimple","featured":true,"dateStr":"October 3, 2023","slug":"code-llm-eval-why-you-should-not-trust-all-the-numbers-you-see","readingTime":{"text":"13 min read","minutes":12.655,"time":759300,"words":2531},"fileName":"code-llm-eval-why-you-should-not-trust-all-the-numbers-you-see.mdx","draft":false,"relatedPosts":[]},{"title":"Context Aware Everything: More Advanced Realtime Context than GitHub Copilot","date":"2023-07-24T07:00:00.000Z","tags":["industry","enterprise"],"filters":["enterprise_page"],"summary":"A deep dive into context awareness of Codeium and how it stacks up against GitHub Copilot and CopilotX.","images":["https://exafunction.github.io/public/hero/hero_context_module.png"],"authors":["nmoy"],"layout":"PostSimple","featured":true,"dateStr":"July 24, 2023","slug":"context-aware-everything-more-advanced-realtime-context-than-github-copilot","readingTime":{"text":"11 min read","minutes":10.325,"time":619500,"words":2065},"fileName":"context-aware-everything-more-advanced-realtime-context-than-github-copilot.mdx","draft":false,"relatedPosts":[]},{"title":"Code Suggestions You Don’t Get from Copilot: In-line FIM","date":"2023-06-09T07:00:00.000Z","tags":["technical","enterprise"],"summary":"In-line Fill-in-the-Middle suggestions, valuable suggestions produced only by Codeium.","images":["https://exafunction.github.io/public/hero/hero_inline_fim.png"],"authors":["nick"],"layout":"PostSimple","featured":true,"relatedPosts":["how-to-make-ai-ux-your-moat"],"dateStr":"June 9, 2023","slug":"inline-fim-code-suggestions","readingTime":{"text":"5 min read","minutes":4.595,"time":275700,"words":919},"fileName":"inline-fim-code-suggestions.mdx","draft":false},{"title":"GitHub Copilot Emits GPL. Codeium Does Not.","date":"2023-04-20T07:00:00.000Z","tags":["company","enterprise"],"filters":["enterprise_page"],"summary":"Demonstrating that GitHub Copilot trains on non-permissive licenses and is unable to filter out suggestions properly, while Codeium does not expose users to legal risk.","images":["/static/images/hero_copilot_gpl.png"],"authors":["default"],"layout":"PostSimple","featured":true,"dateStr":"April 20, 2023","slug":"copilot-trains-on-gpl-codeium-does-not","readingTime":{"text":"10 min read","minutes":9.55,"time":573000,"words":1910},"fileName":"copilot-trains-on-gpl-codeium-does-not.mdx","draft":false,"relatedPosts":[]}],"relatedPosts":[]},"__N_SSG":true},"page":"/blog/[...slug]","query":{"slug":["using-code-syntax-parsing-for-generative-ai"]},"buildId":"VBXOvo5BSUCiJzjePzBK3","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>